<?php

namespace CrazyCodeGen\Tests\Definition\Definitions\Structures\Scenarios;

use CrazyCodeGen\Common\Enums\VisibilityEnum;
use CrazyCodeGen\Definition\Definitions\Contexts\ParentContext;
use CrazyCodeGen\Definition\Definitions\Contexts\ThisContext;
use CrazyCodeGen\Definition\Definitions\Structures\ClassDef;
use CrazyCodeGen\Definition\Definitions\Structures\MethodDef;
use CrazyCodeGen\Definition\Definitions\Structures\MultiTypeDef;
use CrazyCodeGen\Definition\Definitions\Structures\ParameterDef;
use CrazyCodeGen\Definition\Definitions\Structures\PropertyDef;
use CrazyCodeGen\Definition\Definitions\Structures\SingleTypeDef;
use CrazyCodeGen\Definition\Definitions\Structures\VariableDef;
use CrazyCodeGen\Definition\Definitions\Values\ArrayVal;
use CrazyCodeGen\Definition\Definitions\Values\ClassRef;
use CrazyCodeGen\Definition\Definitions\Values\StringVal;
use CrazyCodeGen\Definition\Expressions\Instruction;
use CrazyCodeGen\Definition\Expressions\Operations\Call;
use CrazyCodeGen\Definition\Expressions\Operations\Chain;
use CrazyCodeGen\Definition\Expressions\Operations\NewInstance;
use CrazyCodeGen\Definition\Expressions\Operations\ReturnVal;
use CrazyCodeGen\Definition\Expressions\Operators\Assignment\Assign;
use CrazyCodeGen\Definition\Expressions\Structures\Condition;
use CrazyCodeGen\Rendering\Renderers\Contexts\RenderContext;
use CrazyCodeGen\Rendering\Renderers\Rules\RenderingRules;
use CrazyCodeGen\Rendering\Tokens\CharacterTokens\NewLinesToken;
use CrazyCodeGen\Rendering\Tokens\KeywordTokens\NullToken;
use CrazyCodeGen\Rendering\Tokens\Token;
use CrazyCodeGen\Rendering\Traits\TokenFunctions;
use PHPUnit\Framework\TestCase;

class ModelBuilderScenarioTest extends TestCase
{
    use TokenFunctions;

    public function testAbilityToGenerateModelHelperFromPreviousInternalFramework()
    {
        $baseModelBuilderType = new SingleTypeDef('Internal\TestFramework\MockingFramework\Builders\BaseModelBuilder');
        $taxExemptionCategoryModelType = new SingleTypeDef('internal\Baskets\Models\TaxExemptionCategoryModel');

        $createModelMethod = (new MethodDef('createModel'))
            ->setVisibility(VisibilityEnum::PROTECTED)
            ->setReturnType($taxExemptionCategoryModelType)
            ->addInstruction(new ReturnVal([
                new NewInstance(
                    class: $taxExemptionCategoryModelType,
                    arguments: new ArrayVal([
                        'identifier' => 'stub',
                        'name' => 'stub',
                    ]),
                ),
            ]));
        $hstExemptionMethod = (new MethodDef('hstExemption'))
            ->setReturnType('static')
            ->addInstruction(new Assign(
                subject: new Chain([
                    new ThisContext(),
                    'model',
                    'identifier',
                ]),
                value: new StringVal('hst'),
            ))
            ->addInstruction(new Assign(
                subject: new Chain([
                    new ThisContext(),
                    'model',
                    'name',
                ]),
                value: new StringVal('HST'),
            ))
            ->addInstruction(new ReturnVal(new ThisContext()));
        $getMethod = (new MethodDef('get'))
            ->setReturnType($taxExemptionCategoryModelType)
            ->addInstruction(new ReturnVal([
                new Chain([new ThisContext(), 'model'])
            ]));
        $classDef = (new ClassDef('TaxExemptionCategoryModelBuilder'))
            ->setNamespace('Internal\TestFramework\MockingFramework\Builders\ModelBuilders\InternalApi\Baskets\Models')
            ->addImport($baseModelBuilderType)
            ->addImport($taxExemptionCategoryModelType)
            ->setDocBlock([
                'This file was generated using the Symfony command "mock-helpers:generate".',
                'Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.',
                'If you want to learn more about this framework, visit the documentation on Confluence at: https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.',
            ])
            ->setExtends($baseModelBuilderType)
            ->addMethod($createModelMethod)
            ->addMethod($hstExemptionMethod)
            ->addMethod($getMethod);

        $rules = new RenderingRules();
        $rules->docBlocks->lineLength = 125;

        $this->assertEquals(
            <<<'EOS'
            namespace Internal\TestFramework\MockingFramework\Builders\ModelBuilders\InternalApi\Baskets\Models;
            
            use Internal\TestFramework\MockingFramework\Builders\BaseModelBuilder;
            use internal\Baskets\Models\TaxExemptionCategoryModel;
            
            /**
             * This file was generated using the Symfony command "mock-helpers:generate".
             *
             * Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.
             *
             * If you want to learn more about this framework, visit the documentation on Confluence at:
             * https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.
             */
            class TaxExemptionCategoryModelBuilder extends BaseModelBuilder
            {
                protected function createModel(): TaxExemptionCategoryModel
                {
                    return new TaxExemptionCategoryModel(['identifier' => 'stub', 'name' => 'stub']);
                }
            
                public function hstExemption(): static
                {
                    $this->model->identifier = 'hst';
                    $this->model->name = 'HST';
                    return $this;
                }
            
                public function get(): TaxExemptionCategoryModel
                {
                    return $this->model;
                }
            }
            
            EOS,
            $this->renderTokensToString($classDef->getTokens(new RenderContext(), $rules)),
        );
    }
}
