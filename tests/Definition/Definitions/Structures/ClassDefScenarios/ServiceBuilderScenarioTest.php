<?php

namespace CrazyCodeGen\Tests\Definition\Definitions\Structures\ClassDefScenarios;

use CrazyCodeGen\Common\Exceptions\NoValidConversionRulesMatchedException;
use CrazyCodeGen\Common\Traits\FlattenFunction;
use CrazyCodeGen\Definition\Definitions\Contexts\ThisContext;
use CrazyCodeGen\Definition\Definitions\Structures\ClassDef;
use CrazyCodeGen\Definition\Definitions\Structures\DocBlockDef;
use CrazyCodeGen\Definition\Definitions\Structures\MethodDef;
use CrazyCodeGen\Definition\Definitions\Structures\NamespaceDef;
use CrazyCodeGen\Definition\Definitions\Structures\ParameterDef;
use CrazyCodeGen\Definition\Definitions\Structures\PropertyDef;
use CrazyCodeGen\Definition\Definitions\Types\BuiltInTypeSpec;
use CrazyCodeGen\Definition\Definitions\Types\ClassTypeDef;
use CrazyCodeGen\Definition\Definitions\Types\MultiTypeDef;
use CrazyCodeGen\Definition\Expressions\Operations\ReturnOp;
use CrazyCodeGen\Definition\Expressions\Operators\Assignment\AssignOp;
use CrazyCodeGen\Tests\Common\Formatters\PhpCsFixerFormatter;
use CrazyCodeGen\Rendering\RenderingContext;
use CrazyCodeGen\Rendering\Traits\TokenFunctions;
use PHPUnit\Framework\TestCase;

class ServiceBuilderScenarioTest extends TestCase
{
    use TokenFunctions;
    use FlattenFunction;

    /**
     * @throws NoValidConversionRulesMatchedException
     */
    public function testAbilityToGenerateTestBuilderClassFromPreviousInternalFramework(): void
    {
        $baseMockBuilderType = new ClassTypeDef('Internal\TestFramework\MockingFramework\Builders\BaseMockBuilder');
        $mockObjectType = new ClassTypeDef('PHPUnit\Framework\MockObject\MockObject');
        $hookBasketAdapterType = new ClassTypeDef('internal\Baskets\Adapters\HookBasketAdapter');
        $mockedHookBasketAdapterType = new MultiTypeDef(
            types: [$hookBasketAdapterType, $mockObjectType],
            unionTypes: false,
        );

        $mockProperty = (new PropertyDef('mock'));
        $mockParameter = (new ParameterDef('mock', $mockedHookBasketAdapterType));

        $constructor = (new MethodDef('__construct'))
            ->addParameter($mockParameter)
            ->addInstruction(new AssignOp(
                subject: ThisContext::to($mockProperty),
                value: $mockParameter,
            ));
        $getMockedClassesMethod = (new MethodDef('getMockedClasses'))
            ->setReturnType(BuiltInTypeSpec::arrayType())
            ->setStatic(true)
            ->addInstruction(new ReturnOp([$hookBasketAdapterType]));
        $getServiceMethod = (new MethodDef('getService'))
            ->setReturnType($mockedHookBasketAdapterType)
            ->addInstruction(new ReturnOp(ThisContext::to($mockProperty)));
        $classDef = (new ClassDef('HookBasketAdapterBuilder'))
            ->setNamespace(new NamespaceDef('Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Baskets\Adapters'))
            ->addImport($mockObjectType)
            ->addImport($baseMockBuilderType)
            ->addImport($hookBasketAdapterType)
            ->setDocBlock(new DocBlockDef([
                'This file was generated using the Symfony command "mock-helpers:generate".',
                'Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.',
                'If you want to learn more about this framework, visit the documentation on Confluence at: https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.',
            ]))
            ->setExtends($baseMockBuilderType)
            ->addMethod($constructor)
            ->addMethod($getMockedClassesMethod)
            ->addMethod($getServiceMethod);

        $code = $this->renderTokensToString($classDef->getTokens(new RenderingContext()));
        $newCode = (new PhpCsFixerFormatter())->format($code);

        $this->assertEquals(
            <<<'EOS'
            <?php
            
            namespace Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Baskets\Adapters;
            
            use PHPUnit\Framework\MockObject\MockObject;
            use Internal\TestFramework\MockingFramework\Builders\BaseMockBuilder;
            use internal\Baskets\Adapters\HookBasketAdapter;
            
            /**
             * This file was generated using the Symfony command "mock-helpers:generate".
             *
             * Do not edit this file as the content will be replaced automatically the next
             * time someone will run the generate command.
             *
             * If you want to learn more about this framework, visit the documentation on
             * Confluence at:
             * https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.
             */
            
            class HookBasketAdapterBuilder extends BaseMockBuilder
            {
                public function __construct(HookBasketAdapter&MockObject $mock)
                {
                    $this->mock = $mock;
                }
            
                public static function getMockedClasses(): array
                {
                    return [HookBasketAdapter::class];
                }
            
                public function getService(): HookBasketAdapter&MockObject
                {
                    return $this->mock;
                }
            }
            
            EOS,
            $newCode,
        );
    }
}
