<?php

namespace CrazyCodeGen\Tests\Rendering\Tokens;

use CrazyCodeGen\Common\Enums\VisibilityEnum;
use CrazyCodeGen\Definition\Definitions\Structures\ClassDefinition;
use CrazyCodeGen\Definition\Definitions\Structures\MethodDefinition;
use CrazyCodeGen\Definition\Definitions\Structures\MultiTypeDefinition;
use CrazyCodeGen\Definition\Definitions\Structures\PropertyDefinition;
use CrazyCodeGen\Definition\Definitions\Structures\SingleTypeDefinition;
use CrazyCodeGen\Rendering\Renderers\Contexts\RenderContext;
use CrazyCodeGen\Rendering\Renderers\Rules\RenderingRules;
use CrazyCodeGen\Rendering\Tokens\CharacterTokens\NewLinesToken;
use CrazyCodeGen\Rendering\Tokens\KeywordTokens\NullToken;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ArrayTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\AssignInstructionTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ChainTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ClassReferenceTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ConditionTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\FunctionCallTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\InstructionTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\NewInstanceTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ParentRefTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ReturnInstructionTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\StringTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ThisRefTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\VariableTokenGroup;
use CrazyCodeGen\Rendering\Tokens\Token;
use CrazyCodeGen\Rendering\Traits\TokenFunctions;
use PHPUnit\Framework\TestCase;

class ClassScenarioTest extends TestCase
{
    use TokenFunctions;

    public function testAbilityToGenerateTestBuilderClassFromPreviousInternalFramework()
    {
        $baseMockBuilderType = new SingleTypeDefinition('Internal\TestFramework\MockingFramework\Builders\BaseMockBuilder');
        $mockObjectType = new SingleTypeDefinition('PHPUnit\Framework\MockObject\MockObject');
        $hookBasketAdapterType = new SingleTypeDefinition('internal\Baskets\Adapters\HookBasketAdapter');
        $mockedHookBasketAdapterType = new MultiTypeDefinition(
            types: [$hookBasketAdapterType, $mockObjectType],
            unionTypes: false,
        );

        $constructor = (new MethodDefinition(name: '__construct'))
            ->addParameterExploded('mock', $mockedHookBasketAdapterType)
            ->addInstruction(new AssignInstructionTokenGroup(
                subject: new ChainTokenGroup(chain: [new ThisRefTokenGroup(), 'mock']),
                value: new VariableTokenGroup('mock'),
            ));
        $getMockedClassesMethod = (new MethodDefinition('getMockedClasses'))
            ->setReturnType('array')
            ->setStatic(true)
            ->addInstruction(new ReturnInstructionTokenGroup(
                new ArrayTokenGroup([new ClassReferenceTokenGroup('HookBasketAdapter')])
            ));
        $getServiceMethod = (new MethodDefinition('getService'))
            ->setReturnType($mockedHookBasketAdapterType)
            ->addInstruction(new ReturnInstructionTokenGroup(
                new ChainTokenGroup(chain: [new ThisRefTokenGroup(), 'mock'])
            ));
        $classDef = (new ClassDefinition(name: 'HookBasketAdapterBuilder'))
            ->setNamespace('Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Baskets\Adapters')
            ->addImport($mockObjectType)
            ->addImport($baseMockBuilderType)
            ->addImport($hookBasketAdapterType)
            ->setDocBlock([
                'This file was generated using the Symfony command "mock-helpers:generate".',
                'Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.',
                'If you want to learn more about this framework, visit the documentation on Confluence at: https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.',
            ])
            ->setExtends($baseMockBuilderType)
            ->addMethod($constructor)
            ->addMethod($getMockedClassesMethod)
            ->addMethod($getServiceMethod);

        $rules = new RenderingRules();
        $rules->docBlocks->lineLength = 125;

        $this->assertEquals(
            <<<'EOS'
            namespace Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Baskets\Adapters;
            
            use PHPUnit\Framework\MockObject\MockObject;
            use Internal\TestFramework\MockingFramework\Builders\BaseMockBuilder;
            use internal\Baskets\Adapters\HookBasketAdapter;
            
            /**
             * This file was generated using the Symfony command "mock-helpers:generate".
             *
             * Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.
             *
             * If you want to learn more about this framework, visit the documentation on Confluence at:
             * https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.
             */
            class HookBasketAdapterBuilder extends BaseMockBuilder
            {
                public function __construct(HookBasketAdapter&MockObject $mock)
                {
                    $this->mock = $mock;
                }
            
                public static function getMockedClasses(): array
                {
                    return [HookBasketAdapter::class];
                }
            
                public function getService(): HookBasketAdapter&MockObject
                {
                    return $this->mock;
                }
            }
            
            EOS,
            $this->renderTokensToString($classDef->render(new RenderContext(), $rules)),
        );
    }

    public function testAbilityToGenerateTestHelperFromPreviousInternalFramework()
    {
        $testCaseType = new SingleTypeDefinition('PHPUnit\Framework\TestCase');
        $serviceBuilderType = new SingleTypeDefinition('Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Auditing\Services\AuditingTrackingServiceManagerBuilder');
        $configApiSpyBuilderType = new SingleTypeDefinition('Internal\TestFramework\MockingFramework\MockHelpers\ConfigApiClient\ConfigApiClientSpyBuilder');
        $configApiClientType = new SingleTypeDefinition('ConfigApi\ConfigApiClient');
        $trackingServiceManagerType = new SingleTypeDefinition('internal\Auditing\Services\AuditingTrackingServiceManager');
        $configApiManagerType = new SingleTypeDefinition('internal\managers\ConfigApiManager');

        $setUpMethod = (new MethodDefinition('setUp'))
            ->setReturnType('void')
            ->addInstruction(new InstructionTokenGroup([
                new ChainTokenGroup([
                    new ParentRefTokenGroup(),
                    new FunctionCallTokenGroup(name: 'setUp'),
                ]),
            ]))
            ->addInstruction(new ConditionTokenGroup(
                condition: new Token('!ConfigApiManager::getClient() instanceof ConfigApiClient'),
                trueInstructions: new ChainTokenGroup([
                    $configApiManagerType,
                    new FunctionCallTokenGroup(name: 'setClient', arguments: [new NullToken()]),
                ]),
            ))
            ->addInstruction(new AssignInstructionTokenGroup(
                subject: new ChainTokenGroup([new ThisRefTokenGroup(), 'configApiClientBackup']),
                value: new ChainTokenGroup([
                    $configApiManagerType,
                    new FunctionCallTokenGroup(name: 'getClient'),
                ]),
            ))
            ->addInstruction(new InstructionTokenGroup([
                new ChainTokenGroup([
                    $configApiManagerType,
                    new FunctionCallTokenGroup('setClient', arguments: [new NullToken()]),
                ]),
            ]))
            ->addInstruction(new AssignInstructionTokenGroup(
                subject: new ChainTokenGroup([new ThisRefTokenGroup(), 'configApiClientSpyBuilder']),
                value: new NewInstanceTokenGroup(
                    class: $configApiSpyBuilderType,
                    arguments: [
                        new ChainTokenGroup([
                            $configApiManagerType,
                            new FunctionCallTokenGroup(name: 'getClient'),
                        ]),
                    ],
                ),
            ));
        $tearDownMethod = (new MethodDefinition('tearDown'))
            ->setReturnType('void')
            ->addInstruction(new InstructionTokenGroup([
                new ChainTokenGroup([
                    new ThisRefTokenGroup(),
                    new PropertyDefinition(name: 'configApiClientSpyBuilder'),
                    new FunctionCallTokenGroup(name: 'getService'),
                    new FunctionCallTokenGroup(
                        name: 'validateMandateExpectations',
                        arguments: [
                            new ThisRefTokenGroup(),
                        ],
                    ),
                ]),
            ]))
            ->addInstruction(new InstructionTokenGroup(new ChainTokenGroup([
                $configApiManagerType,
                new FunctionCallTokenGroup(
                    name: 'setClient',
                    arguments: [
                        new ChainTokenGroup([
                            new ThisRefTokenGroup(),
                            new PropertyDefinition('configApiClientBackup'),
                        ]),
                    ],
                ),
            ])))
            ->addInstruction(new InstructionTokenGroup(new ChainTokenGroup([
                new ParentRefTokenGroup(),
                new FunctionCallTokenGroup('tearDown'),
            ])));
        $getConfigApiSpyBuilderMethod = (new MethodDefinition('getConfigApiClientSpyBuilder'))
            ->setVisibility(VisibilityEnum::PROTECTED)
            ->addParameterExploded('scenarioBuildingCallable', new MultiTypeDefinition(types: ['null', 'callable']), defaultValueIsNull: true)
            ->setReturnType($configApiSpyBuilderType)
            ->addInstruction(new ConditionTokenGroup(
                condition: new Token('!isset($this->configApiClientSpyBuilder)'),
                trueInstructions: [
                    new AssignInstructionTokenGroup(
                        subject: new ChainTokenGroup([new ThisRefTokenGroup(), 'configApiClientSpyBuilder']),
                        value: new NewInstanceTokenGroup(
                            class: $configApiSpyBuilderType,
                            arguments: [
                                new ChainTokenGroup([
                                    $configApiManagerType,
                                    new FunctionCallTokenGroup('getClient'),
                                ]),
                            ],
                        ),
                    ),
                ],
            ))
            ->addInstruction(new NewLinesToken())
            ->addInstruction(new ConditionTokenGroup(
                condition: new VariableTokenGroup('scenarioBuildingCallable'),
                trueInstructions: new FunctionCallTokenGroup(
                    name: new VariableTokenGroup('scenarioBuildingCallable'),
                    arguments: [
                        new ChainTokenGroup(chain: [
                            new ThisRefTokenGroup(),
                            new PropertyDefinition(name: 'configApiClientSpyBuilder'),
                        ]),
                    ],
                ),
            ))
            ->addInstruction(new NewLinesToken())
            ->addInstruction(new ReturnInstructionTokenGroup(instructions: [
                new ChainTokenGroup(chain: [new ThisRefTokenGroup(), 'configApiClientSpyBuilder'])
            ]));
        $getAuditingTrackingServiceManagerBuilderMethod = (new MethodDefinition('getAuditingTrackingServiceManagerBuilder'))
            ->setReturnType($serviceBuilderType)
            ->addInstruction(new Token('/** @noinspection PhpUnhandledExceptionInspection */'))
            ->addInstruction(new ReturnInstructionTokenGroup(instructions: [
                new NewInstanceTokenGroup(
                    $serviceBuilderType,
                    arguments: [
                        new ChainTokenGroup([
                            new ThisRefTokenGroup(),
                            new FunctionCallTokenGroup('createMock', arguments: [new ClassReferenceTokenGroup($trackingServiceManagerType)]),
                        ]),
                    ]
                ),
            ]));
        $configApiClientSpyBuilderProperty = new PropertyDefinition(
            name: 'configApiClientSpyBuilder',
            type: $configApiSpyBuilderType,
            visibility: VisibilityEnum::PROTECTED,
        );
        $configApiClientBackupProperty = new PropertyDefinition(
            name: 'configApiClientBackup',
            type: $configApiClientType,
            visibility: VisibilityEnum::PROTECTED,
        );
        $classDef = (new ClassDefinition('FinalizeTrackingOnRequestEndSubscriberTestHelpers'))
            ->setNamespace('Internal\Tests\Auditing\Subscribers\TestHelpers')
            ->addImport($testCaseType)
            ->addImport($serviceBuilderType)
            ->addImport($configApiSpyBuilderType)
            ->addImport($configApiClientType)
            ->addImport($trackingServiceManagerType)
            ->addImport($configApiManagerType)
            ->setDocBlock([
                'This file was generated using the Symfony command "mock-helpers:generate".',
                'Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.',
                'If you want to learn more about this framework, visit the documentation on Confluence at: https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.',
            ])
            ->setExtends($testCaseType)
            ->addProperty($configApiClientSpyBuilderProperty)
            ->addProperty($configApiClientBackupProperty)
            ->addMethod($setUpMethod)
            ->addMethod($tearDownMethod)
            ->addMethod($getConfigApiSpyBuilderMethod)
            ->addMethod($getAuditingTrackingServiceManagerBuilderMethod);

        $rules = new RenderingRules();
        $rules->docBlocks->lineLength = 125;

        $this->assertEquals(
            <<<'EOS'
            namespace Internal\Tests\Auditing\Subscribers\TestHelpers;
            
            use PHPUnit\Framework\TestCase;
            use Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Auditing\Services\AuditingTrackingServiceManagerBuilder;
            use Internal\TestFramework\MockingFramework\MockHelpers\ConfigApiClient\ConfigApiClientSpyBuilder;
            use ConfigApi\ConfigApiClient;
            use internal\Auditing\Services\AuditingTrackingServiceManager;
            use internal\managers\ConfigApiManager;
            
            /**
             * This file was generated using the Symfony command "mock-helpers:generate".
             *
             * Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.
             *
             * If you want to learn more about this framework, visit the documentation on Confluence at:
             * https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.
             */
            class FinalizeTrackingOnRequestEndSubscriberTestHelpers extends TestCase
            {
                protected ConfigApiClientSpyBuilder $configApiClientSpyBuilder;
                protected ConfigApiClient $configApiClientBackup;
            
                public function setUp(): void
                {
                    parent::setUp();
                    if (!ConfigApiManager::getClient() instanceof ConfigApiClient) {
                        ConfigApiManager::setClient(null);
                    }
                    $this->configApiClientBackup = ConfigApiManager::getClient();
                    ConfigApiManager::setClient(null);
                    $this->configApiClientSpyBuilder = new ConfigApiClientSpyBuilder(ConfigApiManager::getClient());
                }
            
                public function tearDown(): void
                {
                    $this->configApiClientSpyBuilder->getService()->validateMandateExpectations($this);
                    ConfigApiManager::setClient($this->configApiClientBackup);
                    parent::tearDown();
                }
            
                protected function getConfigApiClientSpyBuilder(
                    null|callable $scenarioBuildingCallable = null,
                ): ConfigApiClientSpyBuilder {
                    if (!isset($this->configApiClientSpyBuilder)) {
                        $this->configApiClientSpyBuilder = new ConfigApiClientSpyBuilder(ConfigApiManager::getClient());
                    }
            
                    if ($scenarioBuildingCallable) {
                        $scenarioBuildingCallable($this->configApiClientSpyBuilder);
                    }
            
                    return $this->configApiClientSpyBuilder;
                }
            
                public function getAuditingTrackingServiceManagerBuilder(): AuditingTrackingServiceManagerBuilder
                {
                    /** @noinspection PhpUnhandledExceptionInspection */
                    return new AuditingTrackingServiceManagerBuilder($this->createMock(AuditingTrackingServiceManager::class));
                }
            }
            
            EOS,
            $this->renderTokensToString($classDef->render(new RenderContext(), $rules)),
        );
    }

    public function testAbilityToGenerateModelHelperFromPreviousInternalFramework()
    {
        $baseModelBuilderType = new SingleTypeDefinition('Internal\TestFramework\MockingFramework\Builders\BaseModelBuilder');
        $taxExemptionCategoryModelType = new SingleTypeDefinition('internal\Baskets\Models\TaxExemptionCategoryModel');

        $createModelMethod = (new MethodDefinition('createModel'))
            ->setVisibility(VisibilityEnum::PROTECTED)
            ->setReturnType($taxExemptionCategoryModelType)
            ->addInstruction(new ReturnInstructionTokenGroup([
                new NewInstanceTokenGroup(
                    class: 'TaxExemptionCategoryModel',
                    arguments: new ArrayTokenGroup([
                        'identifier' => 'stub',
                        'name' => 'stub',
                    ]),
                ),
            ]));
        $hstExemptionMethod = (new MethodDefinition('hstExemption'))
            ->setReturnType('static')
            ->addInstruction(new AssignInstructionTokenGroup(
                subject: new ChainTokenGroup([
                    new ThisRefTokenGroup(),
                    'model',
                    'identifier',
                ]),
                value: new StringTokenGroup('hst'),
            ))
            ->addInstruction(new AssignInstructionTokenGroup(
                subject: new ChainTokenGroup([
                    new ThisRefTokenGroup(),
                    'model',
                    'name',
                ]),
                value: new StringTokenGroup('HST'),
            ))
            ->addInstruction(new ReturnInstructionTokenGroup(new ThisRefTokenGroup()));
        $getMethod = (new MethodDefinition('get'))
            ->setReturnType($taxExemptionCategoryModelType)
            ->addInstruction(new ReturnInstructionTokenGroup([
                new ChainTokenGroup([new ThisRefTokenGroup(), 'model'])
            ]));
        $classDef = (new ClassDefinition('TaxExemptionCategoryModelBuilder'))
            ->setNamespace('Internal\TestFramework\MockingFramework\Builders\ModelBuilders\InternalApi\Baskets\Models')
            ->addImport($baseModelBuilderType)
            ->addImport($taxExemptionCategoryModelType)
            ->setDocBlock([
                'This file was generated using the Symfony command "mock-helpers:generate".',
                'Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.',
                'If you want to learn more about this framework, visit the documentation on Confluence at: https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.',
            ])
            ->setExtends($baseModelBuilderType)
            ->addMethod($createModelMethod)
            ->addMethod($hstExemptionMethod)
            ->addMethod($getMethod);

        $rules = new RenderingRules();
        $rules->docBlocks->lineLength = 125;

        $this->assertEquals(
            <<<'EOS'
            namespace Internal\TestFramework\MockingFramework\Builders\ModelBuilders\InternalApi\Baskets\Models;
            
            use Internal\TestFramework\MockingFramework\Builders\BaseModelBuilder;
            use internal\Baskets\Models\TaxExemptionCategoryModel;
            
            /**
             * This file was generated using the Symfony command "mock-helpers:generate".
             *
             * Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.
             *
             * If you want to learn more about this framework, visit the documentation on Confluence at:
             * https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.
             */
            class TaxExemptionCategoryModelBuilder extends BaseModelBuilder
            {
                protected function createModel(): TaxExemptionCategoryModel
                {
                    return new TaxExemptionCategoryModel(['identifier' => 'stub', 'name' => 'stub']);
                }
            
                public function hstExemption(): static
                {
                    $this->model->identifier = 'hst';
                    $this->model->name = 'HST';
                    return $this;
                }
            
                public function get(): TaxExemptionCategoryModel
                {
                    return $this->model;
                }
            }
            
            EOS,
            $this->renderTokensToString($classDef->render(new RenderContext(), $rules)),
        );
    }
}
