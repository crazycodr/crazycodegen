<?php

namespace CrazyCodeGen\Tests\Rendering\Tokens;

use CrazyCodeGen\Common\Enums\VisibilityEnum;
use CrazyCodeGen\Rendering\Renderers\Contexts\RenderContext;
use CrazyCodeGen\Rendering\Renderers\Rules\RenderingRules;
use CrazyCodeGen\Rendering\Tokens\CharacterTokens\NewLinesToken;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ArgumentListTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ArgumentTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ClassTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\ConditionTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\DocBlockTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\InstructionTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\MethodTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\MultiTypeTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\NamespaceTokenGroup;
use CrazyCodeGen\Rendering\Tokens\LanguageConstructTokenGroups\PropertyTokenGroup;
use CrazyCodeGen\Rendering\Tokens\Token;
use CrazyCodeGen\Rendering\Traits\TokenFunctions;
use PHPUnit\Framework\TestCase;

class ClassScenarioTest extends TestCase
{
    use TokenFunctions;

    public function testAbilityToGenerateTestBuilderClassFromPreviousInternalFramework()
    {
        $classDef = new ClassTokenGroup(
            name: 'HookBasketAdapterBuilder',
            namespace: new NamespaceTokenGroup(
                path: 'Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Baskets\Adapters',
            ),
            imports: [
                'PHPUnit\Framework\MockObject\MockObject',
                'Internal\TestFramework\MockingFramework\Builders\BaseMockBuilder',
                'internal\Baskets\Adapters\HookBasketAdapter',
            ],
            docBlock: new DocBlockTokenGroup([
                'This file was generated using the Symfony command "mock-helpers:generate".',
                'Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.',
                'If you want to learn more about this framework, visit the documentation on Confluence at: https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.',
            ]),
            extends: 'Internal\TestFramework\MockingFramework\Builders\BaseMockBuilder',
            methods: [
                new MethodTokenGroup(
                    name: '__construct',
                    arguments: new ArgumentListTokenGroup(
                        arguments: [
                            new ArgumentTokenGroup(
                                name: 'mock',
                                type: new MultiTypeTokenGroup(
                                    types: [
                                        'internal\Baskets\Adapters\HookBasketAdapter',
                                        'PHPUnit\Framework\MockObject\MockObject',
                                    ],
                                    unionTypes: false,
                                )
                            )
                        ]
                    ),
                    instructions: [
                        new InstructionTokenGroup(instructions: new Token('$this->mock = $mock')),
                    ],
                ),
                new MethodTokenGroup(
                    name: 'getMockedClasses',
                    returnType: 'array',
                    static: true,
                    instructions: [
                        new InstructionTokenGroup(instructions: new Token('return [HookBasketAdapter::class]')),
                    ],
                ),
                new MethodTokenGroup(
                    name: 'getService',
                    returnType: new MultiTypeTokenGroup(
                        types: [
                            'internal\Baskets\Adapters\HookBasketAdapter',
                            'PHPUnit\Framework\MockObject\MockObject',
                        ],
                        unionTypes: false,
                    ),
                    instructions: [
                        new InstructionTokenGroup(instructions: new Token('return $this->mock')),
                    ],
                ),
            ]
        );

        $rules = new RenderingRules();
        $rules->docBlocks->lineLength = 125;

        $this->assertEquals(
            <<<EOS
            namespace Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Baskets\Adapters;
            
            use PHPUnit\Framework\MockObject\MockObject;
            use Internal\TestFramework\MockingFramework\Builders\BaseMockBuilder;
            use internal\Baskets\Adapters\HookBasketAdapter;
            
            /**
             * This file was generated using the Symfony command "mock-helpers:generate".
             *
             * Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.
             *
             * If you want to learn more about this framework, visit the documentation on Confluence at:
             * https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.
             */
            class HookBasketAdapterBuilder extends BaseMockBuilder
            {
                public function __construct(HookBasketAdapter&MockObject \$mock)
                {
                    \$this->mock = \$mock;
                }
            
                public static function getMockedClasses(): array
                {
                    return [HookBasketAdapter::class];
                }
            
                public function getService(): HookBasketAdapter&MockObject
                {
                    return \$this->mock;
                }
            }
            
            EOS,
            $this->renderTokensToString($classDef->render(new RenderContext(), $rules)),
        );
    }

    public function testAbilityToGenerateTestHelperFromPreviousInternalFramework()
    {
        $classDef = new ClassTokenGroup(
            name: 'FinalizeTrackingOnRequestEndSubscriberTestHelpers',
            namespace: new NamespaceTokenGroup(
                path: 'Internal\Tests\Auditing\Subscribers\TestHelpers',
            ),
            imports: [
                'PHPUnit\Framework\TestCase',
                'Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Auditing\Services\AuditingTrackingServiceManagerBuilder',
                'Internal\TestFramework\MockingFramework\MockHelpers\ConfigApiClient\ConfigApiClientSpyBuilder',
                'ConfigApi\ConfigApiClient',
                'internal\Auditing\Services\AuditingTrackingServiceManager',
                'internal\managers\ConfigApiManager',
            ],
            docBlock: new DocBlockTokenGroup([
                'This file was generated using the Symfony command "mock-helpers:generate".',
                'Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.',
                'If you want to learn more about this framework, visit the documentation on Confluence at: https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.',
            ]),
            extends: 'PHPUnit\Framework\TestCase',
            properties: [
                new PropertyTokenGroup(
                    name: 'configApiClientSpyBuilder',
                    type: 'Internal\TestFramework\MockingFramework\MockHelpers\ConfigApiClient\ConfigApiClientSpyBuilder',
                    visibility: VisibilityEnum::PROTECTED,
                ),
                new PropertyTokenGroup(
                    name: 'configApiClientBackup',
                    type: 'ConfigApi\ConfigApiClient',
                    visibility: VisibilityEnum::PROTECTED,
                ),
            ],
            methods: [
                new MethodTokenGroup(
                    name: 'setUp',
                    returnType: 'void',
                    instructions: [
                        new InstructionTokenGroup(instructions: new Token('parent::setUp()')),
                        new ConditionTokenGroup(
                            condition: new Token('!ConfigApiManager::getClient() instanceof ConfigApiClient'),
                            trueInstructions: new Token('ConfigApiManager::setClient(null)'),
                        ),
                        new InstructionTokenGroup(instructions: new Token('$this->configApiClientBackup = ConfigApiManager::getClient()')),
                        new InstructionTokenGroup(instructions: new Token('ConfigApiManager::setClient(null)')),
                        new InstructionTokenGroup(instructions: new Token('$this->configApiClientSpyBuilder = new ConfigApiClientSpyBuilder(ConfigApiManager::getClient())')),
                    ],
                ),
                new MethodTokenGroup(
                    name: 'tearDown',
                    returnType: 'void',
                    instructions: [
                        new InstructionTokenGroup(instructions: new Token('$this->configApiClientSpyBuilder->getService()->validateMandateExpectations($this)')),
                        new InstructionTokenGroup(instructions: new Token('ConfigApiManager::setClient($this->configApiClientBackup)')),
                        new InstructionTokenGroup(instructions: new Token('parent::tearDown()')),
                    ],
                ),
                new MethodTokenGroup(
                    name: 'getConfigApiClientSpyBuilder',
                    arguments: new ArgumentListTokenGroup(
                        arguments: [
                            new ArgumentTokenGroup(
                                name: 'scenarioBuildingCallable',
                                type: new MultiTypeTokenGroup(types: ['null', 'callable']),
                                defaultValueIsNull: true,
                            ),
                        ],
                    ),
                    returnType: 'Internal\TestFramework\MockingFramework\MockHelpers\ConfigApiClient\ConfigApiClientSpyBuilder',
                    visibility: VisibilityEnum::PROTECTED,
                    instructions: [
                        new ConditionTokenGroup(
                            condition: new Token('!isset($this->configApiClientSpyBuilder)'),
                            trueInstructions: new Token('$this->configApiClientSpyBuilder = new ConfigApiClientSpyBuilder(ConfigApiManager::getClient())'),
                        ),
                        new NewLinesToken(),
                        new ConditionTokenGroup(
                            condition: new Token('$scenarioBuildingCallable'),
                            trueInstructions: new Token('$scenarioBuildingCallable($this->configApiClientSpyBuilder)'),
                        ),
                        new NewLinesToken(),
                        new InstructionTokenGroup(instructions: new Token('return $this->configApiClientSpyBuilder')),
                    ],
                ),
                new MethodTokenGroup(
                    name: 'getAuditingTrackingServiceManagerBuilder',
                    returnType: 'Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Auditing\Services\AuditingTrackingServiceManagerBuilder',
                    instructions: [
                        new Token('/** @noinspection PhpUnhandledExceptionInspection */'),
                        new InstructionTokenGroup(instructions: new Token('return new AuditingTrackingServiceManagerBuilder($this->createMock(AuditingTrackingServiceManager::class))')),
                    ],
                ),
            ]
        );

        $rules = new RenderingRules();
        $rules->docBlocks->lineLength = 125;

        $this->assertEquals(
            <<<EOS
            namespace Internal\Tests\Auditing\Subscribers\TestHelpers;
            
            use PHPUnit\Framework\TestCase;
            use Internal\TestFramework\MockingFramework\Builders\ServiceBuilders\InternalApi\Auditing\Services\AuditingTrackingServiceManagerBuilder;
            use Internal\TestFramework\MockingFramework\MockHelpers\ConfigApiClient\ConfigApiClientSpyBuilder;
            use ConfigApi\ConfigApiClient;
            use internal\Auditing\Services\AuditingTrackingServiceManager;
            use internal\managers\ConfigApiManager;
            
            /**
             * This file was generated using the Symfony command "mock-helpers:generate".
             *
             * Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.
             *
             * If you want to learn more about this framework, visit the documentation on Confluence at:
             * https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.
             */
            class FinalizeTrackingOnRequestEndSubscriberTestHelpers extends TestCase
            {
                protected ConfigApiClientSpyBuilder \$configApiClientSpyBuilder;
                protected ConfigApiClient \$configApiClientBackup;
            
                public function setUp(): void
                {
                    parent::setUp();
                    if (!ConfigApiManager::getClient() instanceof ConfigApiClient) {
                        ConfigApiManager::setClient(null);
                    }
                    \$this->configApiClientBackup = ConfigApiManager::getClient();
                    ConfigApiManager::setClient(null);
                    \$this->configApiClientSpyBuilder = new ConfigApiClientSpyBuilder(ConfigApiManager::getClient());
                }
            
                public function tearDown(): void
                {
                    \$this->configApiClientSpyBuilder->getService()->validateMandateExpectations(\$this);
                    ConfigApiManager::setClient(\$this->configApiClientBackup);
                    parent::tearDown();
                }
            
                protected function getConfigApiClientSpyBuilder(
                    null|callable \$scenarioBuildingCallable = null,
                ): ConfigApiClientSpyBuilder {
                    if (!isset(\$this->configApiClientSpyBuilder)) {
                        \$this->configApiClientSpyBuilder = new ConfigApiClientSpyBuilder(ConfigApiManager::getClient());
                    }
            
                    if (\$scenarioBuildingCallable) {
                        \$scenarioBuildingCallable(\$this->configApiClientSpyBuilder);
                    }
            
                    return \$this->configApiClientSpyBuilder;
                }
            
                public function getAuditingTrackingServiceManagerBuilder(): AuditingTrackingServiceManagerBuilder
                {
                    /** @noinspection PhpUnhandledExceptionInspection */
                    return new AuditingTrackingServiceManagerBuilder(\$this->createMock(AuditingTrackingServiceManager::class));
                }
            }
            
            EOS,
            $this->renderTokensToString($classDef->render(new RenderContext(), $rules)),
        );
    }

    public function testAbilityToGenerateModelHelperFromPreviousInternalFramework()
    {
        $classDef = new ClassTokenGroup(
            name: 'TaxExemptionCategoryModelBuilder',
            namespace: new NamespaceTokenGroup(
                path: 'Internal\TestFramework\MockingFramework\Builders\ModelBuilders\InternalApi\Baskets\Models',
            ),
            imports: [
                'Internal\TestFramework\MockingFramework\Builders\BaseModelBuilder',
                'internal\Baskets\Models\TaxExemptionCategoryModel',
            ],
            docBlock: new DocBlockTokenGroup([
                'This file was generated using the Symfony command "mock-helpers:generate".',
                'Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.',
                'If you want to learn more about this framework, visit the documentation on Confluence at: https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.',
            ]),
            extends: 'Internal\TestFramework\MockingFramework\Builders\BaseModelBuilder',
            methods: [
                new MethodTokenGroup(
                    name: 'createModel',
                    returnType: 'internal\Baskets\Models\TaxExemptionCategoryModel',
                    visibility: VisibilityEnum::PROTECTED,
                    instructions: [
                        new InstructionTokenGroup(instructions: new Token(
                            <<<EOS
                            return new TaxExemptionCategoryModel(
                                properties: [
                                    'identifier' => 'stub',
                                    'name' => 'stub',
                                ],
                            )
                            EOS
                        )),
                    ],
                ),
                new MethodTokenGroup(
                    name: 'hstExemption',
                    returnType: 'static',
                    instructions: [
                        new InstructionTokenGroup(instructions: new Token('$this->model->identifier = \'hst\'')),
                        new InstructionTokenGroup(instructions: new Token('$this->model->name = \'HST\'')),
                        new InstructionTokenGroup(instructions: new Token('return $this')),
                    ],
                ),
                new MethodTokenGroup(
                    name: 'get',
                    returnType: 'internal\Baskets\Models\TaxExemptionCategoryModel',
                    instructions: [
                        new InstructionTokenGroup(instructions: new Token('return $this->model')),
                    ],
                ),
            ]
        );

        $rules = new RenderingRules();
        $rules->docBlocks->lineLength = 125;

        $this->assertEquals(
            <<<EOS
            namespace Internal\TestFramework\MockingFramework\Builders\ModelBuilders\InternalApi\Baskets\Models;
            
            use Internal\TestFramework\MockingFramework\Builders\BaseModelBuilder;
            use internal\Baskets\Models\TaxExemptionCategoryModel;
            
            /**
             * This file was generated using the Symfony command "mock-helpers:generate".
             *
             * Do not edit this file as the content will be replaced automatically the next time someone will run the generate command.
             *
             * If you want to learn more about this framework, visit the documentation on Confluence at:
             * https://example.com/wiki/spaces/COPUNIT/pages/4051238915/Mocking+framework.
             */
            class TaxExemptionCategoryModelBuilder extends BaseModelBuilder
            {
                protected function createModel(): TaxExemptionCategoryModel
                {
                    return new TaxExemptionCategoryModel(
                        properties: [
                            'identifier' => 'stub',
                            'name' => 'stub',
                        ],
                    );
                }
            
                public function hstExemption(): static
                {
                    \$this->model->identifier = 'hst';
                    \$this->model->name = 'HST';
                    return \$this;
                }
            
                public function get(): TaxExemptionCategoryModel
                {
                    return \$this->model;
                }
            }
            
            EOS,
            $this->renderTokensToString($classDef->render(new RenderContext(), $rules)),
        );
    }
}
